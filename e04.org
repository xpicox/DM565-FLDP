#+STARTUP: showall
#+STARTUP: hideblocks
#+PROPERTY: header-args:sh :results output
* Tabular-Like Data Formats. Discovery-Like Command-Line Tools.
  16
  17
** 1
   #+name: files
   - File_Ex_UTF8.txt
   - File_Ex_Latin1.txt
   - File_Ex_Unix_Eol.txt
   - File_Ex_MS-DOS_Eol.txt

   #+begin_src sh :var files=files :cache yes :results output table
     for file in $files
     do
         curl https://imada.sdu.dk/~kslarsen/dm565/Files/$file --output $file --silent
     done
     ls | grep txt
   #+end_src

   #+RESULTS[c9d6d8f5db5d191ae73773eac7ccd63d9853e42d]:
   | File_Ex_Latin1.txt     |
   | File_Ex_MS-DOS_Eol.txt |
   | File_Ex_UTF8.txt       |
   | File_Ex_Unix_Eol.txt   |

   
*** ~file~
    #+begin_src sh :var file=files
      file $file
    #+end_src

    #+RESULTS:
    : File_Ex_UTF8.txt:       UTF-8 Unicode text
    : File_Ex_Latin1.txt:     ISO-8859 text
    : File_Ex_Unix_Eol.txt:   ASCII text
    : File_Ex_MS-DOS_Eol.txt: ASCII text, with CRLF line terminators

*** ~wc~
    Display lines, words and byte for each input file
    #+begin_src sh :var file=files
      wc $file
    #+end_src

    #+RESULTS:
    :        1       1      14 File_Ex_UTF8.txt
    :        1       1      11 File_Ex_Latin1.txt
    :        2       5      22 File_Ex_Unix_Eol.txt
    :        2       5      24 File_Ex_MS-DOS_Eol.txt
    :        6      12      71 total

    
*** ~od~
    octal dump.

    ~od -tcuC~: show byte value in decimal and ascii character if printable
    Options:
    -t type     Specify the output format.
    Output format:
    - c: Characters in the default character set. Non-printing characters are
      represented as 3-digit octal char- acter codes
    - u: unsigned decimal
    - C: of size char (8 bit)
    #+begin_src sh :var file=files
      for f in $file
      do
          echo $f
          od -tcuC $f
      done
    #+end_src

    #+RESULTS:
    :results:
    File_Ex_UTF8.txt
    0000000    B   l 303 245   b 303 246   r   g   r 303 270   d  \n        
               66 108 195 165  98 195 166 114 103 114 195 184 100  10        
    0000016
    File_Ex_Latin1.txt
    0000000    B   l 345   b 346   r   g   r 370   d  \n                    
               66 108 229  98 230 114 103 114 248 100  10                    
    0000013
    File_Ex_Unix_Eol.txt
    0000000    I   t       a   l   l       e   n   d   s   ;  \n   b   u   t
               73 116  32  97 108 108  32 101 110 100 115  59  10  98 117 116
    0000020        h   o   w   ?  \n                                        
               32 104 111 119  63  10                                        
    0000026
    File_Ex_MS-DOS_Eol.txt
    0000000    I   t       a   l   l       e   n   d   s   ;  \r  \n   b   u
               73 116  32  97 108 108  32 101 110 100 115  59  13  10  98 117
    0000020    t       h   o   w   ?  \r  \n                                
              116  32 104 111 119  63  13  10                                
    0000030
    :end:

** 2
   Using the Python csv package, read a file in the default csv format and
   output it in tsv format.
   #+begin_src python
     import csv
     
     exampleFile = open('example.csv', 'r')
     exampleReader = csv.reader(exampleFile, delimiter=',')
     exampleData = list(exampleReader)
     exampleFile.close()
     print(exampleData)
     outputFile = open('output.csv', 'w')
     outputWriter = csv.writer(outputFile, delimiter='\t')
     for record in exampleData:
         outputWriter.writerow(record)
     outputWriter.writerow(['Leopard ', '0.7'])
     outputFile.close()
   #+end_src

   #+RESULTS:
   : None

** 3
   Define separate grep -E regular expressions matching lines with
   Regular expression format:
   man re_format
*** Scandinavian email address
    #+begin_src sh
      grep -E '.+@.+\.(dk|no|se|ax|fi|fo|gl|is|sj)'
    #+end_src
    
*** CPR numbers
    #+begin_src sh
      grep -E '[0-3][0-9][01][0-9]{3}-?[[:digit:]]{4}'
    #+end_src
    
*** phone numbers written as 2 groups of 4 digits or 4 groups of 2 digits; groups separated by one space.
    #+begin_src sh
      grep -E '[[:digit:]]{4} [[:digit:]]{4}|[[:digit:]]{2}( [[:digit:]]{2}){3}' num.txt
    #+end_src

    #+RESULTS:
    : 73 70 71 35
    : 7370 7135

*** dates in the Danish format 1/1 1970.
    #+begin_src sh
      grep -E '([1-2][0-9]|[1-9]|30|31)/(1[012]|[1-9]) (([12][0-9]{3})|([1-9][0-9]{1,2})|[0-9])' num.txt
    #+end_src

    #+RESULTS:
    : 13/12 10
    : 11/9 1988

** 4
   Using /usr/share/dict/words (or similar), define separate grep -E regular
   expressions matching lines (words, since there is only one word per line in that
   file) with:
*** consecutive repetition of at least three characters
    
    #+begin_src sh :var file="/usr/share/dict/words"
      grep -E '(.)(\1){2,}' $file
    #+end_src

    #+RESULTS:
    : bossship
    : demigoddessship
    : goddessship
    : headmistressship
    : patronessship
    : wallless
    : whenceeer

*** a consecutive repetition of the same sequence of four characters
    
    #+begin_src sh :var file="/usr/share/dict/words"
      grep -E '(....)\1' $file
    #+end_src

    #+RESULTS:
    #+begin_example
    acetacetic
    alibangbang
    anapanapa
    antiantibody
    antiantidote
    antiantienzyme
    antiantitoxin
    antiberiberin
    archarchitect
    awikiwiki
    barabara
    beriberi
    beriberic
    camphorphorone
    caracara
    Carphiophiops
    chinching
    chowchow
    colicolitis
    coracoradialis
    couscous
    couscousou
    craniorhachischisis
    denizenize
    froufrou
    galagala
    ganggang
    grisgris
    guitguit
    homoiousious
    jinglingly
    khuskhus
    kivikivi
    kiwikiwi
    kolokolo
    kotukutuku
    matamata
    minglingly
    mocomoco
    murumuru
    notidanidan
    okupukupu
    ophiophilism
    ophiophilist
    osteosteatoma
    palapalai
    peripericarditis
    phosphosilicate
    pincpinc
    piripiri
    poohpoohist
    poroporo
    postrostral
    quinquina
    quinquino
    rachischisis
    ramarama
    riroriro
    stomatomalacia
    successlessly
    ticktick
    tikitiki
    tinglingly
    torotoro
    #+end_example

*** a repetition of total length 4 and a palindrome of total length 4
    
    #+begin_src sh :results output :var file="/usr/share/dict/words"
      grep -E '(....)\1' $file | grep -E '(.)(.)\2\1'
    #+end_src

    #+RESULTS:

    
    #+begin_src sh :results output :var file="/usr/share/dict/words"
      grep -E -e '(....)\1' -e '(.)(.)\2\1' $file
    #+end_src

*** words without vowels (a, e, i, o, u, y); use an option
    
    #+begin_src sh :results output :var file="/usr/share/dict/words"
      grep -Ev '[aeiouyAEIOUY]' $file
    #+end_src

    #+RESULTS:
    #+begin_example
    B
    b
    C
    c
    cwm
    D
    d
    F
    f
    G
    g
    grr
    H
    h
    J
    j
    K
    k
    L
    l
    M
    m
    Mr
    Mrs
    N
    n
    nth
    P
    p
    pst
    Q
    q
    R
    r
    S
    s
    sh
    st
    T
    t
    tch
    tck
    Td
    th
    tst
    V
    v
    W
    w
    X
    x
    Z
    z
    #+end_example

    #+begin_src sh :results output :var file="/usr/share/dict/words"
      grep -Eiv '[aeiouy]' $file
    #+end_src

    #+RESULTS:
    #+begin_example
    B
    b
    C
    c
    cwm
    D
    d
    F
    f
    G
    g
    grr
    H
    h
    J
    j
    K
    k
    L
    l
    M
    m
    Mr
    Mrs
    N
    n
    nth
    P
    p
    pst
    Q
    q
    R
    r
    S
    s
    sh
    st
    T
    t
    tch
    tck
    Td
    th
    tst
    V
    v
    W
    w
    X
    x
    Z
    z
    #+end_example

** 5
   Define separate grep -E regular expressions matching lines with
  
*** an opening and closing html headline tag, e.g., <h2>My Headline</h2>
    use an option to make it case insensitive, then use an option to print the
    line number for every match. You may require that headlines are on a line by
    themselves (and of course not nested).

    
    #+begin_src sh :results output
      curl --silent 'https://en.wikipedia.org/wiki/Main_Page' | grep -Ein '<(h[1-6]).*>.*</\1>'
    #+end_src

    #+RESULTS:
    #+begin_example
    44:	<h1 id="firstHeading" class="firstHeading" >Main Page</h1>
    75:<h2 id="mp-tfa-h2" class="mp-h2"><span id="From_today.27s_featured_article"></span><span class="mw-headline" id="From_today's_featured_article">From today's featured article</span></h2>
    93:<h2 id="mp-dyk-h2" class="mp-h2"><span class="mw-headline" id="Did_you_know_...">Did you know&#160;...</span></h2>
    117:<h2 id="mp-itn-h2" class="mp-h2"><span class="mw-headline" id="In_the_news">In the news</span></h2>
    139:<h2 id="mp-otd-h2" class="mp-h2"><span class="mw-headline" id="On_this_day">On this day</span></h2>
    167:<h2 id="mp-tfl-h2" class="mp-h2"><span id="From_today.27s_featured_list"></span><span class="mw-headline" id="From_today's_featured_list">From today's featured list</span></h2>
    187:<h2 id="mp-tfp-h2" class="mp-h2"><span id="Today.27s_featured_picture"></span><span class="mw-headline" id="Today's_featured_picture">Today's featured picture</span></h2>
    211:<h2 id="mp-other" class="mp-h2"><span class="mw-headline" id="Other_areas_of_Wikipedia">Other areas of Wikipedia</span></h2>
    219:<h2 id="mp-sister" class="mp-h2"><span id="Wikipedia.27s_sister_projects"></span><span class="mw-headline" id="Wikipedia's_sister_projects">Wikipedia's sister projects</span></h2>
    275:<h2 id="mp-lang" class="mp-h2"><span class="mw-headline" id="Wikipedia_languages">Wikipedia languages</span></h2>
    406:	<h2>Navigation menu</h2>
    #+end_example
    
*** numbers in the range 1000 through 9999
    
    #+begin_src sh :results output
      grep -E '(^|[^0-9])[1-9][0-9]{3}([^0-9]|$)' num.txt
    #+end_src

    #+RESULTS:
    : 7370 7135
    : 73 70 7135
    : 7370 71 35
    : 1990
    : 9999
    : 11/9 1988

*** numbers in the range 100 through 9999
    
    #+begin_src sh :results output
      grep -E '([1-9][0-9]?)[0-9]{2}' num.txt
    #+end_src

    #+RESULTS:
    : 7370 7135
    : 73 70 7135
    : 7370 71 35
    : 100
    : 1990
    : 990
    : 9999
    : 11/9 1988

** 6
   Using ls -l | grep -E REGULAR_EXPRESSION, list all files in some directory
   that
*** others can read or write (it is the 8th and 9th characters that are relevant)
    
    #+begin_src sh :results output
      ls -l | grep -E '^.{7}(r.|.w)'
    #+end_src

    #+RESULTS:
    : -rw-r--r--  1 valentino  staff     11 Sep 16 15:55 File_Ex_Latin1.txt
    : -rw-r--r--  1 valentino  staff     24 Sep 16 15:55 File_Ex_MS-DOS_Eol.txt
    : -rw-r--r--  1 valentino  staff     14 Sep 16 15:55 File_Ex_UTF8.txt
    : -rw-r--r--  1 valentino  staff     22 Sep 16 15:55 File_Ex_Unix_Eol.txt
    : -rw-r--r--  1 valentino  staff    123 Aug 30 14:35 README.md
    : -rw-r--r--  1 valentino  staff  10060 Sep 16 18:04 e03.org
    : -rw-r--r--  1 valentino  staff    122 Sep 16 17:22 example.csv
    : -rw-r--r--  1 valentino  staff     62 Sep 16 17:59 num.txt
    : -rw-r--r--  1 valentino  staff    146 Sep 16 17:21 output.csv

*** were created in November and are pdf files

    #+begin_src sh :results output
      ls -l | grep -E '([^ ]+ +){5}Sep.*\.pdf$'
    #+end_src

    #+RESULTS:
    : -rw-r--r--  1 valentino  staff      0 Sep 16 18:07 definitely-not-a.pdf

